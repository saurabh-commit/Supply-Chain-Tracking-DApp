// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('SupplyChain')

let accounts

contract("SupplyChain", function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    let sku = 1
    let upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    let productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    let itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    
    ///Available Accounts
    ///==================
    // Accounts:
    // (0) 0x9a85994ff8acf9a01f791a54b701a052c41653bc
    // (1) 0x271adc0adc5b1af2ad7ee851f503f2bd4ce30d7c
    // (2) 0x8ef8b437a901c8590d84d1582a98b86903599780
    // (3) 0xeb040017e810c408f1c70631c61302712b2253bb
    // (4) 0x130c42e722d353b51cf5b18ef122ca353166ffe2
    // (5) 0xcf00f4af89098c213895c7fe2853a0e593f986b6
    // (6) 0xe2d4d26f405d76a96de9f1e578bf1ddfb194373d
    // (7) 0x4317ecf6a56f8d3717cd9305991c15776cec749e
    // (8) 0x165065abb995ef1673bceb2425e72e1123537faa
    // (9) 0x73ec388be76b2928dc63c1b153bbdd9efa4d440c

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID, {from: ownerID})
        // Declare and Initialize a variable for event
        let eventEmitted = false

        await supplyChain.Harvested((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(
            upc, 
            originFarmerID, 
            originFarmName, 
            originFarmInformation, 
            originFarmLatitude, 
            originFarmLongitude, 
            productNotes,
            { from: originFarmerID }
        )

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event Processed()
        await supplyChain.Processed((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(
            upc,
            { from: originFarmerID }
        )

        itemState = 1;
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid Item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event Packed()
        await supplyChain.Packed((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(
            upc,
            { from: originFarmerID }
        )

        itemState = 2;
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid Item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event ForSale()
        await supplyChain.ForSale((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Packed by calling function sellItem()
        await supplyChain.sellItem(
            upc,
            productPrice,
            { from: originFarmerID }
        )

        itemState = 3;
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice');
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid Item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        await supplyChain.addDistributor(distributorID, {from: ownerID});
        let eventEmitted = false
        
        // Watch the emitted event Sold()
        await supplyChain.Sold((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(
            upc,
            { from: distributorID, value: productPrice }
        )

        itemState = 4;
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid Item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid Distributor ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event Shipped()
        await supplyChain.Shipped((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function shipItem()
        await supplyChain.shipItem(
            upc,
            { from: distributorID }
        );
        itemState = 5;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid Item State');
        assert.equal(eventEmitted, true, 'Error: Invalid event emitted');
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        await supplyChain.addRetailer(retailerID);
        let eventEmitted = false;
        
        // Watch the emitted event Received()
        await supplyChain.Received((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function receiveItem()
        await supplyChain.receiveItem(
            upc,
            { from: retailerID }
        );
        itemState = 6;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid Item State');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid Retailer ID')
        assert.equal(eventEmitted, true, 'Error: Invalid event emitted');     
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        await supplyChain.addConsumer(consumerID);
        let eventEmitted = false;
        
        // Watch the emitted event Purchased()
        await supplyChain.Purchased((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function purchaseItem()
        await supplyChain.purchaseItem(
            upc,
            { from: consumerID }
        );
        itemState = 7;


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid Item State');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid Distributor ID')
        assert.equal(eventEmitted, true, 'Error: Invalid event emitted');
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid UPC');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid productID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid productNotes');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice');
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid itemState');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid reatailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID');
    })

});

